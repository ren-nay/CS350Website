#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('myapp:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}

const express = require('express');
const { fstat } = require('fs');

app.post('/feedback', (req, res) => {
  var body = '';
  var testValidity = false;
  req.on('data', function(chunk) {
    body += chunck.toString();
  });
  req.on('end', function() {
    testValidity = ffv.validateForm(body);
    if(testValidity === true){
      var ts = Date.now();
      var parsed = qs.parse(body);
      fs.appendFile('flatfileDB.txt', convertToString(parsed, ts), function(error) {
        if (error) {
          console.log('Error writing to flatfileDB.txt file', error);
          throw error;
        }
        console.log('Wrote to flatfileDB.txt file successfully!');
      });
      sendEmail(parsed['email'].ts);
      res.writeHead(301, {'Content-Type': 'text/plain', Location: '/'});
      res.end();
    } else {
      res.writeHead(301, {'Content-Type': 'text/plain', Location: '/'});
      res.end(testValidity);
    }
  });
    const name = req.body.name;
    const address = req.body.address;
    const phone = req.body.phone;
    const email = req.body.email;
    const comments = req.body.comments;
    res.end();
});
